# When done, submit this entire file to the autograder.

# Part 1

def sum arr
  # YOUR CODE HERE
if arr.length == 0
    return 0
end

sum_of_all = 0
for i in arr
  sum_of_all += arr[i]
end

  return sum_of_all
end

def max_2_sum arr
  # YOUR CODE HERE
  if arr.length == 0
    return 0
  end

  if arr.length ==1
    return arr.first
  end

  arr.sort!
  sum_of_2 = arr[arr.length-1] + arr[arr.length-2]
  return sum_of_2

end

def sum_to_n? arr, n
  # YOUR CODE HERE
    if arr.length == 0 || arr.length == 1
      return false
    end
  

    i = 0
    while i < arr.length
      j = i + 1
      while j < arr.length
        if arr[i] + arr[j] == n
          return true
        end
      j += 1
      end
    i += 1
    end

  return false
end

# Part 2

def hello(name)
  # YOUR CODE HERE
  return "Hello, #{name}"
end

def starts_with_consonant? s
  # YOUR CODE HERE
  if s.length == 0 || s == nil
    return false
  end
  
  if (s.slice(0) =~ /[[:alpha:]]/) == nil
    return false
  end

  if (s.slice(0) =~ /[aeiouAEIOU]/) == 0
    return false
  end

  return true
end

def binary_multiple_of_4? s
  # YOUR CODE HERE

  if s.length == 0
    return false
  end
  
  for i in 0..(s.length-1)
    if (s[i] =~ /[01]/) == nil
      return false
    end
  end

  decimal = 0
  for i in (s.length-1).downto(0)
      if(s[i] == '1')
        decimal += 2**(i)
      end
  end

  if (decimal % 4) == 0
    return true
  end

end

# Part 3

class BookInStock
# YOUR CODE HERE
    attr_accessor :isbn
    attr_accessor :price
    
    def initialize(isbn, price)
      if isbn.length == 0 || price <= 0
          raise ArgumentError
    end
      @isbn = isbn
      @price = price
    end
    
    def price_as_string
      price_string = ""
      price_string = "$%.2f" % price
    end

end

Run options: include {:full_description=>/\#sum/}

Ruby intro part 1
  #sum
    should be defined
    returns correct sum [20 points]
    works on the empty array [10 points]
  #sum_to_n
    should be defined
    returns true when any two elements sum to the second argument [30 points]
    returns false for any single element array [5 points]
    returns false for an empty array [5 points]

Finished in 0.00818 seconds (files took 0.08582 seconds to load)
7 examples, 0 failures

Run options: include {:full_description=>/\#max_2_sum/}

Ruby intro part 1
  #max_2_sum
    should be defined
    returns the correct sum [7 points]
    works even if 2 largest values are the same [3 points]
    returns zero if array is empty [10 points]
    returns value of the element if just one element [10 points]

Finished in 0.00384 seconds (files took 0.08945 seconds to load)
5 examples, 0 failures

Run options: include {:full_description=>/\#sum_to_n/}

Ruby intro part 1
  #sum_to_n
    should be defined
    returns true when any two elements sum to the second argument [30 points]
    returns false for any single element array [5 points]
    returns false for an empty array [5 points]

Finished in 0.00438 seconds (files took 0.08442 seconds to load)
4 examples, 0 failures

Run options: include {:full_description=>/\#hello/}

#hello
  should be defined
  The hello method returns the correct string [30 points]

Finished in 0.00207 seconds (files took 0.09137 seconds to load)
2 examples, 0 failures

Run options: include {:full_description=>/\#starts_with_consonant\?/}

#starts_with_consonant?
  should be defined
  classifies true cases [10 points]
  classifies false cases [10 points]
  works on the empty string [5 points]
  works on nonletters [5 points]

Finished in 0.00353 seconds (files took 0.08759 seconds to load)
5 examples, 0 failures

Run options: include {:full_description=>/\#binary_multiple_of_4\?/}

#binary_multiple_of_4?
  should be defined
  classifies valid binary numbers [30 points]
  rejects invalid binary numbers [10 points]

Finished in 0.00361 seconds (files took 0.08345 seconds to load)
3 examples, 0 failures

Run options: include {:full_description=>/BookInStock/}

BookInStock
  should be defined
  getters and setters
    should set ISBN [10 points]
    should set price [10 points]
    should be able to change ISBN [10 points]
    should be able to change price [10 points]
  constructor
    should reject invalid ISBN number [10 points]
    should reject zero price [10 points]
    should reject negative price [10 points]
  #price_as_string
    should be defined
    should display 33.95 as "$33.95" [10 points]
    should display 1.1 as $1.10 [10 points]
    should display 20 as $20.00 [10 points]

Finished in 0.00533 seconds (files took 0.08578 seconds to load)
12 examples, 0 failures